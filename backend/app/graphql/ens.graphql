type Domain @entity {
  id: ID!
  name: String
  labelName: String
  labelhash: Bytes
  parent: Domain
  subdomains: [Domain!]!
  subdomainCount: Int!
  resolvedAddress: Account
  resolver: Resolver
  ttl: BigInt
  isMigrated: Boolean!
  createdAt: BigInt!
  owner: Account!
  registrant: Account
  wrappedOwner: Account
  expiryDate: BigInt
  registration: Registration @derivedFrom(field: "domain")
  wrappedDomain: WrappedDomain @derivedFrom(field: "domain")
  events: [DomainEvent!]! @derivedFrom(field: "domain")
}

interface DomainEvent {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
}

type Transfer implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  owner: Account!
}

type NewOwner implements DomainEvent @entity {
  id: ID!
  parentDomain: Domain!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  owner: Account!
}

type NewResolver implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  resolver: Resolver!
}

type NewTTL implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  ttl: BigInt!
}

type WrappedTransfer implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  owner: Account!
}

type NameWrapped implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  name: String
  fuses: Int!
  owner: Account!
  expiryDate: BigInt!
}

type NameUnwrapped implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  owner: Account!
}

type FusesSet implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  fuses: Int!
}

type ExpiryExtended implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  expiryDate: BigInt!
}

type Registration @entity {
  id: ID!
  domain: Domain!
  registrationDate: BigInt!
  expiryDate: BigInt!
  cost: BigInt
  registrant: Account!
  labelName: String
  events: [RegistrationEvent!]! @derivedFrom(field: "registration")
}

interface RegistrationEvent {
  id: ID!
  registration: Registration!
  blockNumber: Int!
  transactionID: Bytes!
}

type NameRegistered implements RegistrationEvent @entity {
  id: ID!
  registration: Registration!
  blockNumber: Int!
  transactionID: Bytes!
  registrant: Account!
  expiryDate: BigInt!
}

type NameRenewed implements RegistrationEvent @entity {
  id: ID!
  registration: Registration!
  blockNumber: Int!
  transactionID: Bytes!
  expiryDate: BigInt!
}

type NameTransferred implements RegistrationEvent @entity {
  id: ID!
  registration: Registration!
  blockNumber: Int!
  transactionID: Bytes!
  newOwner: Account!
}

type WrappedDomain @entity {
  id: ID!
  domain: Domain!
  expiryDate: BigInt!
  fuses: Int!
  owner: Account!
  name: String
}

type Account @entity {
  id: ID!
  domains: [Domain!]! @derivedFrom(field: "owner")
  wrappedDomains: [WrappedDomain!] @derivedFrom(field: "owner")
  registrations: [Registration!] @derivedFrom(field: "registrant")
}

type Resolver @entity {
  id: ID!
  domain: Domain
  address: Bytes!
  addr: Account
  contentHash: Bytes
  texts: [String!]
  coinTypes: [BigInt!]
  events: [ResolverEvent!]! @derivedFrom(field: "resolver")
}

interface ResolverEvent {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
}

type AddrChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  addr: Account!
}

type MulticoinAddrChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  coinType: BigInt!
  addr: Bytes!
}

type NameChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  name: String!
}

type AbiChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  contentType: BigInt!
}

type PubkeyChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  x: Bytes!
  y: Bytes!
}

type TextChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  key: String!
  value: String
}

type ContenthashChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  hash: Bytes!
}

type InterfaceChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  interfaceID: Bytes!
  implementer: Bytes!
}

type AuthorisationChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  owner: Bytes!
  target: Bytes!
  isAuthorized: Boolean!
}

type VersionChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  version: BigInt!
}
